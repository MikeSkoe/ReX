// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ReX = require("../src/ReX.bs.js");
var Test = require("./Test.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");

function check(on, call, msg, expected) {
  var unsub = ReX.sub(on, (function (param) {
          return Test.run(undefined, msg, expected, param);
        }));
  Curry._1(call, undefined);
  unsub();
}

function testMap(param) {
  var match = ReX.make(1);
  var setX = match[1];
  check(ReX.map(match[0], (function (num) {
              return num + 1 | 0;
            })), (function (param) {
          ReX.call(setX, 1);
        }), "map", 2);
}

function testReduce(param) {
  var match = ReX.make(undefined);
  var setX = match[1];
  var appendIfOdd = function (acc, curr) {
    if (curr % 2 === 0) {
      return acc;
    } else {
      return Belt_List.add(acc, curr);
    }
  };
  var oddNums = ReX.reduce(ReX.reduce(match[0], 0, (function (acc, param) {
              return acc + 1 | 0;
            })), /* [] */0, appendIfOdd);
  for(var _for = 1; _for <= 9; ++_for){
    ReX.call(setX, undefined);
  }
  check(oddNums, (function (param) {
          ReX.call(setX, undefined);
        }), "reduce", {
        hd: 9,
        tl: {
          hd: 7,
          tl: {
            hd: 5,
            tl: {
              hd: 3,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      });
}

function testThunkSimple(param) {
  var match = ReX.make(1);
  var setX = match[1];
  var thunked = ReX.thunk(match[0], (function (dispatch, a) {
          Curry._1(dispatch, a);
        }));
  check(thunked, (function (param) {
          ReX.call(setX, 1);
        }), "thunk", 1);
}

function testThunkFilter(param) {
  var match = ReX.make(1);
  var setX = match[1];
  var callIfEven = function (dispatch, a) {
    if (a % 2 === 0) {
      Curry._1(dispatch, a);
    }
    
  };
  var thunked = ReX.reduce(ReX.thunk(match[0], callIfEven), 0, (function (acc, curr) {
          return acc + curr | 0;
        }));
  ReX.call(setX, 1);
  ReX.call(setX, 2);
  ReX.call(setX, 31);
  ReX.call(setX, 44);
  ReX.call(setX, 101);
  check(thunked, (function (param) {
          ReX.call(setX, 302);
        }), "thunk filter", 348);
}

function counter(param) {
  var reduce = function (state, action) {
    if (action) {
      return state + action._0 | 0;
    } else {
      return 0;
    }
  };
  var match = ReX.make(0);
  var setIncr = match[1];
  var match$1 = ReX.make(undefined);
  var setReset = match$1[1];
  var input = ReX.reduce(ReX.merge(ReX.map(match[0], (function (shift) {
                  return /* Increment */{
                          _0: shift
                        };
                })), ReX.map(match$1[0], (function (param) {
                  return /* Reset */0;
                }))), 0, reduce);
  ReX.call(setIncr, 1);
  ReX.call(setIncr, 20);
  check(input, (function (param) {
          ReX.call(setIncr, 300);
        }), "counter == 321", 321);
  check(input, (function (param) {
          ReX.call(setReset, undefined);
        }), "counter is reset", 0);
  ReX.call(setIncr, 2);
  ReX.call(setIncr, 30);
  check(input, (function (param) {
          ReX.call(setIncr, 400);
        }), "counter == 432", 432);
}

function main(param) {
  testMap(undefined);
  testReduce(undefined);
  testThunkSimple(undefined);
  testThunkFilter(undefined);
  counter(undefined);
}

main(undefined);

var List;

exports.List = List;
exports.check = check;
exports.testMap = testMap;
exports.testReduce = testReduce;
exports.testThunkSimple = testThunkSimple;
exports.testThunkFilter = testThunkFilter;
exports.counter = counter;
exports.main = main;
/*  Not a pure module */
