// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ReX = require("../src/ReX.bs.js");
var Test = require("./Test.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function wait(ms) {
  return new Promise((function (resolve, param) {
                setTimeout((function (param) {
                        resolve(undefined);
                      }), ms);
              }));
}

async function getLast(on, call) {
  var lastValue = {
    contents: undefined
  };
  var unsub = ReX.sub(on, (function (value) {
          lastValue.contents = Caml_option.some(value);
        }));
  await Curry._1(call, undefined);
  Curry._1(unsub, undefined);
  return lastValue.contents;
}

var Util = {
  wait: wait,
  getLast: getLast
};

async function testMap(param) {
  var state = ReX.make(function (num) {
        return num + 1 | 0;
      });
  var lastValue = await getLast(state, (async function (param) {
          return ReX.call(state, 1);
        }));
  return Test.run(undefined, "map", lastValue, 2);
}

async function testReduce(param) {
  var appendIfOdd = function (acc, curr) {
    if (curr % 2 === 0) {
      return acc;
    } else {
      return Belt_List.add(acc, curr);
    }
  };
  var input = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.reduce(ReX.reduce(input, 0, (function (acc, param) {
                  return acc + 1 | 0;
                })), /* [] */0, appendIfOdd), (async function (param) {
          for(var _for = 1; _for <= 10; ++_for){
            ReX.call(input, undefined);
          }
        }));
  return Test.run(undefined, "reduce", lastValue, {
              hd: 9,
              tl: {
                hd: 7,
                tl: {
                  hd: 5,
                  tl: {
                    hd: 3,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            });
}

async function testFilter(param) {
  var isEven = function (value) {
    return value % 2 === 0;
  };
  var input = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.reduce(ReX.filter(input, isEven), 0, (function (acc, curr) {
              return acc + curr | 0;
            })), (async function (param) {
          ReX.call(input, 1);
          ReX.call(input, 2);
          ReX.call(input, 31);
          ReX.call(input, 44);
          ReX.call(input, 101);
          return ReX.call(input, 302);
        }));
  return Test.run(undefined, "filter", lastValue, 348);
}

async function testCounter(param) {
  var reduce = function (state, action) {
    if (action) {
      return state + action._0 | 0;
    } else {
      return 0;
    }
  };
  var incr = ReX.make(function (shift) {
        return /* Increment */{
                _0: shift
              };
      });
  var reset = ReX.make(function (param) {
        return /* Reset */0;
      });
  var state = ReX.reduce(ReX.either(incr, reset), 0, reduce);
  var lastValue = await getLast(state, (async function (param) {
          ReX.call(incr, 1);
          ReX.call(incr, 20);
          return ReX.call(incr, 300);
        }));
  Test.run(undefined, "counter === 321", lastValue, 321);
  var lastValue$1 = await getLast(state, (async function (param) {
          ReX.call(reset, undefined);
          return await wait(100);
        }));
  Test.run(undefined, "counter is reset", lastValue$1, 0);
  var lastValue$2 = await getLast(state, (async function (param) {
          ReX.call(incr, 2);
          ReX.call(incr, 30);
          return ReX.call(incr, 400);
        }));
  return Test.run(undefined, "counter == 432", lastValue$2, 432);
}

async function testDelay(param) {
  var input = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.reduce(ReX.delay(input, 100), /* [] */0, Belt_List.add), (async function (param) {
          ReX.call(input, 1);
          await wait(10);
          ReX.call(input, 2);
          ReX.call(input, 3);
          await wait(50);
          return ReX.call(input, 4);
        }));
  Test.run(undefined, "delay without waiting", lastValue, undefined);
  var lastValue$1 = await getLast(ReX.reduce(ReX.delay(input, 100), /* [] */0, Belt_List.add), (async function (param) {
          ReX.call(input, 1);
          await wait(10);
          ReX.call(input, 2);
          ReX.call(input, 3);
          await wait(50);
          ReX.call(input, 4);
          return await wait(100);
        }));
  return Test.run(undefined, "delay with waiting", lastValue$1, {
              hd: 4,
              tl: {
                hd: 3,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            });
}

async function testDebounce(param) {
  var input = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.reduce(ReX.debounce(input, 100), /* [] */0, Belt_List.add), (async function (param) {
          ReX.call(input, 1);
          await wait(200);
          ReX.call(input, 2);
          ReX.call(input, 3);
          ReX.call(input, 4);
          return await wait(200);
        }));
  return Test.run(undefined, "debounced", lastValue, {
              hd: 4,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            });
}

async function testInterval(param) {
  var interval = ReX.interval(100);
  var lastValue = await getLast(ReX.map(ReX.reduce(interval, {
                id: 0,
                value: 1
              }, (function (acc, id) {
                  if (id !== acc.id) {
                    return {
                            id: id,
                            value: 1
                          };
                  } else {
                    return {
                            id: acc.id,
                            value: acc.value + 1 | 0
                          };
                  }
                })), (function (param) {
              return param.value;
            })), (async function (param) {
          ReX.call(interval, false);
          await wait(400);
          ReX.call(interval, false);
          await wait(2000);
          return ReX.call(interval, true);
        }));
  return Test.run(undefined, "timer", lastValue, 19);
}

async function testBoth(param) {
  var a = ReX.make(ReX.id);
  var b = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.both(a, b, [
            0,
            ""
          ]), (async function (param) {
          ReX.call(a, 1);
          ReX.call(b, "A");
          return ReX.call(a, 2);
        }));
  return Test.run(undefined, "both", lastValue, [
              2,
              "A"
            ]);
}

async function testMapSub(param) {
  var a = ReX.make(ReX.id);
  var match = ReX.mapSub(ReX.reduce(ReX.map(a, (function (prim) {
                  return String(prim);
                })), "", (function (a, b) {
              return "" + a + ":" + b + "";
            })), ReX.id);
  var b = match[0];
  var lastValue = await getLast(b, (async function (param) {
          ReX.call(a, 1);
          ReX.call(a, 2);
          return ReX.call(a, 3);
        }));
  Test.run(undefined, "mapSub :1:2:3", lastValue, ":1:2:3");
  Curry._1(match[1], undefined);
  var lastValue$1 = await getLast(b, (async function (param) {
          ReX.call(a, 1);
          ReX.call(a, 2);
          return ReX.call(a, 3);
        }));
  return Test.run(undefined, "mapSub empty", lastValue$1, undefined);
}

async function testFlatMap(param) {
  var input = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.reduce(ReX.flatMap(input, true, (function (value) {
                  return ReX.map(ReX.make(ReX.id), (function (param) {
                                if (value === true) {
                                  return "TRUE";
                                } else {
                                  return "FALSE";
                                }
                              }));
                })), /* [] */0, Belt_List.add), (async function (param) {
          ReX.call(input, true);
          ReX.call(input, false);
          ReX.call(input, false);
          return ReX.call(input, true);
        }));
  return Test.run(undefined, "timer", lastValue, {
              hd: "TRUE",
              tl: {
                hd: "FALSE",
                tl: {
                  hd: "FALSE",
                  tl: {
                    hd: "TRUE",
                    tl: /* [] */0
                  }
                }
              }
            });
}

async function testSub(param) {
  var input = ReX.make(ReX.id);
  var lastValue = await getLast(ReX.map(ReX.map(input, (function (value) {
                  return {
                          isEven: value % 2 === 0,
                          value: value
                        };
                })), (function (param) {
              return param.isEven;
            })), (async function (param) {
          return ReX.call(input, 3);
        }));
  return Test.run(undefined, "sub", lastValue, false);
}

async function main(param) {
  await Promise.all([
        testMap(undefined),
        testReduce(undefined),
        testFilter(undefined),
        testCounter(undefined),
        testInterval(undefined),
        testSub(undefined),
        testFlatMap(undefined),
        testBoth(undefined),
        testDebounce(undefined),
        testDelay(undefined),
        testMapSub(undefined)
      ]);
  console.log("Finished");
}

main(undefined);

var List;

exports.List = List;
exports.Util = Util;
exports.testMap = testMap;
exports.testReduce = testReduce;
exports.testFilter = testFilter;
exports.testCounter = testCounter;
exports.testDelay = testDelay;
exports.testDebounce = testDebounce;
exports.testInterval = testInterval;
exports.testBoth = testBoth;
exports.testMapSub = testMapSub;
exports.testFlatMap = testFlatMap;
exports.testSub = testSub;
exports.main = main;
/*  Not a pure module */
