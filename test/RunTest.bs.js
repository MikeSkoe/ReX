// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Rexx = require("../src/rexx.bs.js");
var Test = require("./Test.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function wait(ms) {
  return new Promise((function (resolve, param) {
                setTimeout((function (param) {
                        resolve(undefined);
                      }), ms);
              }));
}

async function getLast(on, call) {
  var lastValue = {
    contents: undefined
  };
  var unsub = Rexx.sub(on, (function (value) {
          lastValue.contents = Caml_option.some(value);
        }));
  await Curry._1(call, undefined);
  Curry._1(unsub, undefined);
  return lastValue.contents;
}

var Util = {
  wait: wait,
  getLast: getLast
};

async function testMap(param) {
  var x = Rexx.make(Rexx.id);
  var mapped = Rexx.map(x, (function (num) {
          return num + 1 | 0;
        }));
  var lastValue = await getLast(mapped, (async function (param) {
          return Rexx.call(x, 1);
        }));
  return Test.run(undefined, "map", lastValue, 2);
}

async function testReduce(param) {
  var x = Rexx.make(Rexx.id);
  var appendIfOdd = function (acc, curr) {
    if (curr % 2 === 0) {
      return acc;
    } else {
      return Belt_List.add(acc, curr);
    }
  };
  var oddNums = Rexx.reduce(Rexx.reduce(x, 0, (function (acc, param) {
              return acc + 1 | 0;
            })), /* [] */0, appendIfOdd);
  var lastValue = await getLast(oddNums, (async function (param) {
          for(var _for = 1; _for <= 10; ++_for){
            Rexx.call(x, undefined);
          }
        }));
  return Test.run(undefined, "reduce", lastValue, {
              hd: 9,
              tl: {
                hd: 7,
                tl: {
                  hd: 5,
                  tl: {
                    hd: 3,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            });
}

async function testThunkFilter(param) {
  var x = Rexx.make(Rexx.id);
  var callIfEven = function (a, dispatch) {
    if (a % 2 === 0) {
      return Curry._1(dispatch, a);
    }
    
  };
  var thunked = Rexx.reduce(Rexx.thunk(x, callIfEven), 0, (function (acc, curr) {
          return acc + curr | 0;
        }));
  var lastValue = await getLast(thunked, (async function (param) {
          Rexx.call(x, 1);
          Rexx.call(x, 2);
          Rexx.call(x, 31);
          Rexx.call(x, 44);
          Rexx.call(x, 101);
          return Rexx.call(x, 302);
        }));
  return Test.run(undefined, "thunk filter", lastValue, 348);
}

async function testCounter(param) {
  var reduce = function (state, action) {
    if (action) {
      return state + action._0 | 0;
    } else {
      return 0;
    }
  };
  var incr = Rexx.make(Rexx.id);
  var reset = Rexx.make(Rexx.id);
  var input = Rexx.reduce(Rexx.merge(Rexx.map(incr, (function (shift) {
                  return /* Increment */{
                          _0: shift
                        };
                })), Rexx.map(reset, (function (param) {
                  return /* Reset */0;
                })), Rexx.id), 0, reduce);
  var lastValue = await getLast(input, (async function (param) {
          Rexx.call(incr, 1);
          Rexx.call(incr, 20);
          return Rexx.call(incr, 300);
        }));
  Test.run(undefined, "counter === 321", lastValue, 321);
  var lastValue$1 = await getLast(input, (async function (param) {
          return Rexx.call(reset, undefined);
        }));
  Test.run(undefined, "counter is reset", lastValue$1, 0);
  var lastValue$2 = await getLast(input, (async function (param) {
          Rexx.call(incr, 2);
          Rexx.call(incr, 30);
          return Rexx.call(incr, 400);
        }));
  return Test.run(undefined, "counter == 432", lastValue$2, 432);
}

async function testInterval(param) {
  var interval = Rexx.interval(100);
  var incr = Rexx.map(Rexx.reduce(interval, {
            id: 0,
            value: 1
          }, (function (acc, id) {
              if (id !== acc.id) {
                return {
                        id: id,
                        value: 1
                      };
              } else {
                return {
                        id: acc.id,
                        value: acc.value + 1 | 0
                      };
              }
            })), (function (param) {
          return param.value;
        }));
  var lastValue = await getLast(incr, (async function (param) {
          Rexx.call(interval, false);
          await wait(400);
          Rexx.call(interval, false);
          await wait(2000);
          return Rexx.call(interval, true);
        }));
  return Test.run(undefined, "timer", lastValue, 19);
}

async function testFlatMap(param) {
  var a = Rexx.make(Rexx.id);
  var res = Rexx.reduce(Rexx.flatMap(a, true, (function (value) {
              return Rexx.make(function (param) {
                          if (value === true) {
                            return "TRUE";
                          } else {
                            return "FALSE";
                          }
                        });
            })), /* [] */0, Belt_List.add);
  var lastValue = await getLast(res, (async function (param) {
          Rexx.call(a, true);
          Rexx.call(a, false);
          Rexx.call(a, false);
          return Rexx.call(a, true);
        }));
  return Test.run(undefined, "timer", lastValue, {
              hd: "TRUE",
              tl: {
                hd: "FALSE",
                tl: {
                  hd: "FALSE",
                  tl: {
                    hd: "TRUE",
                    tl: /* [] */0
                  }
                }
              }
            });
}

async function testSub(param) {
  var x = Rexx.make(Rexx.id);
  var strc = Rexx.map(Rexx.map(x, (function (value) {
              return {
                      isEven: value % 2 === 0,
                      value: value
                    };
            })), (function (param) {
          return param.isEven;
        }));
  var lastValue = await getLast(strc, (async function (param) {
          return Rexx.call(x, 3);
        }));
  Test.run(undefined, "sub", lastValue, false);
  Rexx.call(x, 2);
  return Test.run(undefined, "unsubed", lastValue, false);
}

async function main(param) {
  console.log("test {");
  await Promise.all([
        testMap(undefined),
        testReduce(undefined),
        testThunkFilter(undefined),
        testCounter(undefined),
        testInterval(undefined),
        testSub(undefined),
        testFlatMap(undefined)
      ]);
  console.log("}");
}

main(undefined);

var List;

exports.List = List;
exports.Util = Util;
exports.testMap = testMap;
exports.testReduce = testReduce;
exports.testThunkFilter = testThunkFilter;
exports.testCounter = testCounter;
exports.testInterval = testInterval;
exports.testFlatMap = testFlatMap;
exports.testSub = testSub;
exports.main = main;
/*  Not a pure module */
