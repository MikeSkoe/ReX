// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function make(param) {
  var t = {
    contents: /* [] */0
  };
  var call = function (value) {
    Belt_List.forEach(t.contents, (function (fn) {
            Curry._1(fn, value);
          }));
  };
  return [
          t,
          call
        ];
}

function thunk(depOn, thunk$1) {
  var resOn = {
    contents: /* [] */0
  };
  var lastUnsub = {
    contents: undefined
  };
  depOn.contents = Belt_List.add(depOn.contents, (function (value) {
          Belt_List.forEach(resOn.contents, (function (fn) {
                  Belt_Option.forEach(lastUnsub.contents, (function (fn) {
                          Curry._1(fn, undefined);
                        }));
                  lastUnsub.contents = thunk$1(fn, value);
                }));
        }));
  return resOn;
}

function map(depOn, map$1) {
  var resOn = {
    contents: /* [] */0
  };
  depOn.contents = Belt_List.add(depOn.contents, (function (value) {
          Belt_List.forEach(resOn.contents, (function (fn) {
                  return Curry._1(fn, Curry._1(map$1, value));
                }));
        }));
  return resOn;
}

function merge(a, b) {
  var resOn = {
    contents: /* [] */0
  };
  var callback = function (value) {
    Belt_List.forEach(resOn.contents, (function (fn) {
            return Curry._1(fn, value);
          }));
  };
  a.contents = Belt_List.add(a.contents, callback);
  b.contents = Belt_List.add(b.contents, callback);
  return resOn;
}

function reduce(depOn, initial, reduce$1) {
  var resOn = {
    contents: /* [] */0
  };
  var state = {
    contents: initial
  };
  depOn.contents = Belt_List.add(depOn.contents, (function (value) {
          state.contents = Curry._2(reduce$1, state.contents, value);
          Belt_List.forEach(resOn.contents, (function (fn) {
                  return Curry._1(fn, state.contents);
                }));
        }));
  return resOn;
}

function sub(depOn, callback) {
  depOn.contents = Belt_List.add(depOn.contents, callback);
  return function () {
    depOn.contents = Belt_List.keep(depOn.contents, (function (fn) {
            return Caml_obj.notequal(fn, callback);
          }));
  };
}

function call(call$1, value) {
  return Curry._1(call$1, value);
}

exports.make = make;
exports.map = map;
exports.merge = merge;
exports.thunk = thunk;
exports.reduce = reduce;
exports.sub = sub;
exports.call = call;
/* No side effect */
