// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_math = require("rescript/lib/js/js_math.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");

function make(param) {
  return {
          id: Js_math.random_int(1, 99999),
          subs: /* [] */0
        };
}

function thunk(depOn, thunk$1) {
  var resOn = {
    id: Js_math.random_int(1, 99999),
    subs: /* [] */0
  };
  var lastUnsub = {
    contents: undefined
  };
  depOn.subs = Belt_List.add(depOn.subs, (function (value) {
          Belt_List.forEach(resOn.subs, (function (fn) {
                  Core__Option.forEach(lastUnsub.contents, (function (fn) {
                          Curry._1(fn, undefined);
                        }));
                  lastUnsub.contents = thunk$1(fn, value);
                }));
        }));
  return resOn;
}

function merge(a, b) {
  var resOn = {
    id: Js_math.random_int(1, 99999),
    subs: /* [] */0
  };
  var callback = function (value) {
    Belt_List.forEach(resOn.subs, (function (fn) {
            Curry._1(fn, value);
          }));
  };
  a.subs = Belt_List.add(a.subs, callback);
  b.subs = Belt_List.add(b.subs, callback);
  return resOn;
}

function sub(depOn, callback) {
  depOn.subs = Belt_List.add(depOn.subs, callback);
  return function (param) {
    depOn.subs = Belt_List.keep(depOn.subs, (function (fn) {
            return fn !== callback;
          }));
  };
}

function call(t, value) {
  Belt_List.forEach(t.subs, (function (fn) {
          Curry._1(fn, value);
        }));
}

function reduce(depOn, initial, reduce$1) {
  var resOn = {
    id: Js_math.random_int(1, 99999),
    subs: /* [] */0
  };
  var state = {
    contents: initial
  };
  depOn.subs = Belt_List.add(depOn.subs, (function (value) {
          state.contents = Curry._2(reduce$1, state.contents, value);
          Belt_List.forEach(resOn.subs, (function (fn) {
                  Curry._1(fn, state.contents);
                }));
        }));
  return resOn;
}

function map(depOn, map$1) {
  var resOn = {
    id: Js_math.random_int(1, 99999),
    subs: /* [] */0
  };
  depOn.subs = Belt_List.add(depOn.subs, (function (value) {
          Belt_List.forEach(resOn.subs, (function (fn) {
                  Curry._1(fn, Curry._1(map$1, value));
                }));
        }));
  return resOn;
}

var Utils = {
  reduce: reduce,
  map: map
};

exports.make = make;
exports.merge = merge;
exports.thunk = thunk;
exports.sub = sub;
exports.call = call;
exports.Utils = Utils;
/* No side effect */
