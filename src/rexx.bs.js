// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_math = require("rescript/lib/js/js_math.js");
var Belt_MapInt = require("rescript/lib/js/belt_MapInt.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");

function id(a) {
  return a;
}

function makeId(param) {
  return Js_math.random_int(1, 9999);
}

function make(mapper) {
  return {
          id: Js_math.random_int(1, 9999),
          thunk: (function (value, dispatch) {
              Curry._1(dispatch, Curry._1(mapper, value));
            }),
          onNext: undefined
        };
}

function sub(t, effect) {
  var id = Js_math.random_int(1, 9999);
  var unsub = function (param) {
    t.onNext = Belt_MapInt.remove(t.onNext, id);
  };
  t.onNext = Belt_MapInt.set(t.onNext, id, effect);
  return unsub;
}

function call(t, value) {
  Belt_MapInt.forEach(t.onNext, (function (param, dispatch) {
          Curry._2(t.thunk, value, dispatch);
        }));
}

function merge(a, b, map) {
  var res = make(map);
  a.onNext = Belt_MapInt.set(a.onNext, res.id, (function (param) {
          return call(res, param);
        }));
  b.onNext = Belt_MapInt.set(b.onNext, res.id, (function (param) {
          return call(res, param);
        }));
  return res;
}

function reduce(t, initial, reducer) {
  var stored = {
    contents: initial
  };
  var res = make(function (value) {
        var newValue = Curry._2(reducer, stored.contents, value);
        stored.contents = newValue;
        return newValue;
      });
  t.onNext = Belt_MapInt.set(t.onNext, res.id, (function (param) {
          return call(res, param);
        }));
  return res;
}

function map(t, map$1) {
  var res = make(map$1);
  t.onNext = Belt_MapInt.set(t.onNext, res.id, (function (param) {
          return call(res, param);
        }));
  return res;
}

function flatMap(t, empty, flatMap$1) {
  var res = Curry._1(flatMap$1, empty);
  t.onNext = Belt_MapInt.set(t.onNext, res.id, (function (value) {
          var newRes = Curry._1(flatMap$1, value);
          res.thunk = newRes.thunk;
          call(res, value);
        }));
  return res;
}

function thunk(t, thunk$1) {
  var res = make(id);
  res.thunk = thunk$1;
  t.onNext = Belt_MapInt.set(t.onNext, res.id, (function (param) {
          return call(res, param);
        }));
  return res;
}

function interval(interval$1) {
  var x = {
    contents: undefined
  };
  return {
          id: Js_math.random_int(1, 9999),
          thunk: (function (stop, dispatch) {
              Core__Option.forEach(x.contents, (function (prim) {
                      clearInterval(prim);
                    }));
              if (stop) {
                return ;
              }
              var id = Js_math.random_int(1, 9999);
              x.contents = Caml_option.some(setInterval((function (param) {
                          Curry._1(dispatch, id);
                        }), interval$1));
            }),
          onNext: undefined
        };
}

var Subs;

exports.Subs = Subs;
exports.id = id;
exports.makeId = makeId;
exports.make = make;
exports.sub = sub;
exports.call = call;
exports.merge = merge;
exports.reduce = reduce;
exports.map = map;
exports.flatMap = flatMap;
exports.thunk = thunk;
exports.interval = interval;
/* No side effect */
